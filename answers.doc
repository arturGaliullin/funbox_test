Q1
Для пользователя:

1.Понятный и отзывчивый интерфейс, чтобы пользователь не терялся в приложении;
2.Предложенный функционал должен удовлетворять все требования пользователя;
3.Приятный дизайн приложения;

Для менеджера:

1.Чтобы у приложения была четкая документация к проекту и описаны различные тонкости функционала для того, чтобы можно было легче проводить встречи с заказчиком;
2.Возможность быстро добавлять необходимый функционал;
3.Проект должен быть интересен менеджеру т.к. намного легче работать с продуктом, который интересен человеку, который ведет этот проект;

Для дизайнера:

1.Возможность реализовать новые дизайнерские фичи;
2.Как и менеджеру, должен нравится сам проект;

Для верстальщика:

1. Простой и со вкусом, созданный дизайн;
2. Отсутствие обходимости поддержки старый версий IE и Safari;

Для серверного программиста:

1.Последняя версия API и хорошая документация по нему;
2.Хорошая архитектура БД и оптимизированные запросы;
3.Отсутствие дыр в безопасности и костылей т.к. в дальнейшем при масштабировании бекенда возможны его падения и займет много времени для нахожднения и устранения багов в узких местах.

Q2

Особенности:

1.Создание и поддержка стандартов разработки, тестирования и т.д. внутри команды.
2.Зачастую это длительные проекты, поэтому могут уйти из команды проекта и придти новые члены, в связи с этим разрабатывается документация и собирается вся информация касательно проекта, чтобы ввести в курс дела или освежить память.
3.Более сложная архитектура, которая требует большого опыта от тимлида проекта т.к. при невнимательности возникнут трудности в дальнейшем масштабировании проекта.
4.Появляется необходимость в автоматизации рутинных задач.

При разработке многостраничных сайтов очень помогал кодстайл внутри команды т.к. бывало такое, что код невозможно прочитать и понять для чего используется та или иная его часть. Так же очень круто это реиспользование различных компонентов, вынос много раз используемого функционала в декораторы или в служебные функции, использование шаблонизаторов и методологий(например БЭМ). Всё это ускоряет процесс разработки в разы. Бывали проблемы, например предоставлен неполный дизайн, неработающий API, но все эти проблемы решались всей командой.

Q3

Presentation Components отвечает за внешний вид, как должен выглядеть тот или иной элемент в интерфейсе, он получает данные извне и никакой бизнес-логики в себе не содержит. Сontainer Сomponents как раз таки и содержит бизнес-логику, отвечает за то, как это работает. Такое разделение обеспечивает модульность приложения, есть возможность повторно использовать компонент, который отвечает лишь за внешний вид и не содержит никакой логики. Так же есть у такого подхода недостатки, проект быстро обрастает большим количеством файлов, которые ухудшают навигацию и работу с проектом.

Q4

Реализовать наследование в JS можно двумя способами:

1.Прототипный стиль.

Прототипное наследование реализуется за счет ссылки __proto__, которая присутствует у каждого объекта, в этой ссылке находится прототип, где будет идти поиск нужного нам метода или свойства, если он не будет найден в предложенном нам объекте. Чтобы реализовать наследоавания есть два способа:

//Родительский класс
function Parent(name) {
 this.name = name;
}

//Добавили метод
Parent.prototype.sayName = function() {
 console.log(this.name);
}

//Дочерний класс
function Child(name) {
 this.name = name;
}

//1 способ, IE10+
- Child.prototype.__proto__ = Parent.prototype;

//2 способ
- Child.prototype = Object.create(Parent.prototype);
  Child.prototype.constructor = Child;

2. Функциональный стиль.

Функциональное наследование релизуется за счет вызова из конструктора потомка родительский с привязкой контекста через apply.

function Child(name) {
 Parent.apply(this, arguments);
 this.name = name;
}

Q5

Nightwatch, CasperJS, Cypress
Есть опыт только юнит тестирования на jest и enzyme.

Q6

Задам вопрос проект менеджеру, пока жду ответа готовлюсь к варианту, когда нужно на своё усмотрение реализовать работу формы. В случае, когда есть ТЗ, следую ему, если он отсутствует,
то консультируюсь с менеджером проекта на счет своих мыслей и видения, как должно быть. После утверждения приступлю к выполнению.

Q7

IDEA, консоль браузера, различные плагины для браузера, банальный console.log() очень помогает, так же использую webpack c нужными настройками или react-scripts.

Q8

Книги по тому или иному языку или фреймворку, youtube, habr, medium.
Интересна химия, биология

Q9

Обычный парень, со спокойным характером и с реалистичным взглядом на мир.
Т.к. учавствовал в разработке внутренних продуктов компаний, то к сожалению не могу предоставить ссылки на них. Могу лишь показать github - https://github.com/arturGaliullin 
 

